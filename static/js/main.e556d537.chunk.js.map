{"version":3,"sources":["components/GuessInterface/GuessInterface.tsx","common/guessingFunctionRunner.ts","components/History/History.tsx","components/Description/Description.tsx","components/Options/Options.tsx","components/Loader/Loader.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GuessInterface","disabled","onTakeGuess","guessState","onSubmitGuessFunction","guessFunctionBody","setGuessFunctionBody","setGuess","difficultyLevel","className","onSubmit","e","preventDefault","htmlFor","style","display","onChange","target","value","placeholder","type","autoComplete","name","event","containsOnlyDigits","length","isValidGuess","guess","guessHasUniqueDigits","i","lastIndexOf","match","join","createGuessFunction","lastGuess","memory","result","undefined","eval","worker","runGuessingFunction","guessingFunction","number","bulls","cows","oldMemory","getNumberOfBulls","getNumberOfCows","foundNumber","numGuesses","error","digit","includes","generateNumber","digits","Math","floor","random","push","self","onmessage","msg","data","postMessage","guessFunction","payload","functionBody","averageGuesses","Error","counter","correctGuess","toString","History","history","playerName","map","entry","index","Description","Options","optionState","setOptions","previousPlayers","list","id","Loader","useState","dots","setDots","useEffect","interval","setInterval","newDots","Array","fill","clearInterval","initialAppState","options","round","evaluatingFunction","message","getPreviousPlayers","reducer","oldState","action","newState","provideHint","num","humanizeNumber","App","useReducer","state","dispatch","useLayoutEffect","historyString","localStorage","getItem","JSON","parse","getHistoryFromLocalStorage","code","GuessFunctionRunner","blob","Blob","Worker","URL","createObjectURL","receivedMsg","terminate","setTimeout","handleGuessFunctionSubmit","guessResults","getGuessResult","console","log","newMessage","randomMessages","generateMessage","onClick","newHistory","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e556d537.chunk.js","sourcesContent":["import React, { FC, ReactElement, useState } from \"react\";\nimport { DifficultyLevel, GuessingFunction } from \"../../common/Types\";\nimport \"./GuessInterface.css\";\n\nconst GuessInterface: FC<{\n  difficultyLevel: DifficultyLevel;\n  guessState: string;\n  setGuess: (guess: string) => void;\n  onTakeGuess: () => void;\n  onSubmitGuessFunction: () => void;\n  guessFunctionBody: string;\n  setGuessFunctionBody: (guessFunctionBody: string) => void;\n  disabled: boolean;\n}> = ({\n  disabled,\n  onTakeGuess,\n  guessState,\n  onSubmitGuessFunction,\n  guessFunctionBody,\n  setGuessFunctionBody,\n  setGuess,\n  difficultyLevel,\n}): ReactElement => {\n  return (\n    <section className=\"GuessInterface\">\n      {difficultyLevel === \"PROg(r)amer\" ? (\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            onSubmitGuessFunction();\n          }}\n        >\n          <label htmlFor=\"guessFunction\" style={{ display: \"block\" }}>\n            {\n              \"function (lastGuess:{guess: string, bulls: number, cows:number}, memory:any){\"\n            }\n            <br />\n            {\"const result = {guess: '', memory: undefined\"}\n          </label>\n          <textarea\n            style={{ display: \"block\" }}\n            onChange={(e) => setGuessFunctionBody(e.target.value)}\n            value={guessFunctionBody}\n            disabled={disabled}\n            placeholder={\n              '//Brute Force Example\\nif(lastGuess.guess === \"\") result.guess = \"0000\" \\nresult.guess = String(Number(lastGuess.guess) + 1).padStart(4,\"0\")'\n            }\n          ></textarea>\n          {\"return result:{guess: string, memory: any}\"}\n          <br />\n          {\"}\"}\n          <input\n            type=\"submit\"\n            value=\"Submit Function\"\n            disabled={disabled}\n            style={{ display: \"block\" }}\n          />\n        </form>\n      ) : (\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            onTakeGuess();\n          }}\n        >\n          <label htmlFor=\"guess\">\n            Your Guess:\n            <input\n              autoComplete=\"off\"\n              type=\"string\"\n              name=\"guess\"\n              value={guessState}\n              onChange={(event) =>\n                (containsOnlyDigits(event.target.value) ||\n                  event.target.value === \"\") &&\n                event.target.value.length <= 4 &&\n                setGuess(event.target.value)\n              }\n              disabled={disabled}\n              placeholder=\"4 Digit Number\"\n            />\n          </label>\n          <input\n            type=\"submit\"\n            value=\"Take Guess\"\n            disabled={disabled || !isValidGuess(guessState, difficultyLevel)}\n          />\n        </form>\n      )}\n    </section>\n  );\n};\n\nexport default GuessInterface;\n\nfunction isValidGuess(guess: string, difficultyLevel: DifficultyLevel) {\n  //Not 4 digits\n  if (guess.length !== 4) return false;\n  //Contains non-number character\n  if (!containsOnlyDigits(guess)) return false;\n  if (difficultyLevel === \"Easy\" && !guessHasUniqueDigits(guess)) return false;\n  return true;\n}\n\nfunction guessHasUniqueDigits(guess: string) {\n  for (let i = 0; i < guess.length; i++) {\n    if (guess.lastIndexOf(guess[i]) !== i) return false;\n  }\n  return true;\n}\n\nfunction containsOnlyDigits(guess: string) {\n  return guess.match(/[0-9]/g)?.join(\"\") === guess;\n}\n\nfunction createGuessFunction(guessFunctionBody: string) {\n  return (\n    lastGuess: { guess: string; bulls: number; cows: number },\n    memory: any\n  ) => {\n    const result = { guess: \"\", memory: undefined };\n    // eslint-disable-next-line no-eval\n    eval(guessFunctionBody);\n    return result;\n  };\n}\n","/// <reference lib=\"WebWorker\" />\nimport { GuessingFunctionRunnerMessage, GuessingFunction } from \"./Types\";\ndeclare const self: Worker;\n// export empty type because of tsc --isolatedModules flag\nconst worker = () => {\n  self.onmessage = (msg) => {\n    const data = msg.data as GuessingFunctionRunnerMessage;\n    switch (data.type) {\n      case \"ping\":\n        self.postMessage({ type: \"pong\" });\n        break;\n      case \"runFunction\":\n        const guessFunction = createGuessFunction(data.payload.functionBody);\n        let averageGuesses = 0;\n        let result: {\n          type: \"success\",\n          foundNumber: boolean\n          numGuesses: number\n        } | { type: \"error\", error: any } = { type: \"error\", error: new Error(\"should never happen\") };\n        for (let counter = 0; counter < 1000; counter++) {\n          result = runGuessingFunction(guessFunction, generateNumber());\n          if(result.type === \"error\") break;\n          if(result.type === \"success\" && result.foundNumber === false) break;\n          averageGuesses += result.numGuesses\n        }\n        averageGuesses = averageGuesses / 1000\n        \n\n        if (result.type === \"success\")\n          self.postMessage({\n            type: \"result\",\n            correctGuess: result.foundNumber,\n            numGuesses: result.foundNumber ? Math.floor(averageGuesses) : 10000,\n          });\n        if (result.type === \"error\")\n          self.postMessage({\n            type: \"error\",\n            error: result.error.toString(),\n          });\n    }\n  };\n\n  function createGuessFunction(guessFunctionBody: string) {\n    return (\n      lastGuess: { guess: string; bulls: number; cows: number },\n      memory: any\n    ) => {\n      const result = { guess: \"\", memory: undefined };\n      // eslint-disable-next-line no-eval\n      eval(guessFunctionBody);\n      return result;\n    };\n  }\n\n  function runGuessingFunction(\n    guessingFunction: GuessingFunction,\n    number: string\n  ): {\n    type: \"success\",\n    foundNumber: boolean\n    numGuesses: number\n  } | { type: \"error\", error: any } {\n    try {\n      const maxIterations = 10000;\n      let i = 1;\n      const lastGuess = { guess: \"\", bulls: 0, cows: 0 };\n      let oldMemory = null;\n      while (i <= maxIterations) {\n        const { guess, memory } = guessingFunction(lastGuess, oldMemory);\n        oldMemory = memory;\n        lastGuess.guess = guess;\n        lastGuess.bulls = getNumberOfBulls(number, guess);\n        lastGuess.cows = getNumberOfCows(number, guess);\n        if (lastGuess.guess === number) break;\n        i++;\n      }\n      return {\n        type: \"success\",\n        foundNumber: lastGuess.guess === number,\n        numGuesses: i,\n      };\n    } catch (error: any) {\n      return { type: \"error\", error };\n    }\n  }\n\n  function getNumberOfBulls(number: string, guess: string) {\n    let result = 0;\n    for (let i = 0; i < guess.length; i++) {\n      const digit = guess[i];\n      if (digit === number[i]) result++;\n    }\n    return result;\n  }\n\n  function getNumberOfCows(number: string, guess: string) {\n    let result = 0;\n    for (let i = 0; i < guess.length; i++) {\n      const digit = guess[i];\n      if (number.includes(digit) && digit !== number[i]) result++;\n    }\n    return result;\n  }\n\n  function generateNumber() {\n    const digits: number[] = [];\n    while (digits.length < 4) {\n      const digit = Math.floor(Math.random() * 10);\n      digits.push(digit);\n    }\n    return digits.join(\"\");\n  }\n};\n\nexport default worker;\n","import React, { FC, ReactElement } from \"react\";\nimport { DifficultyLevel, HistoryEntry } from \"../../common/Types\";\nimport \"./History.css\";\n\nconst History: FC<{ history: HistoryEntry[]; playerName?: string ,difficultyLevel: DifficultyLevel}> = ({\n  history,\n  playerName,\n  difficultyLevel\n}): ReactElement => {\n  return (\n    <section className=\"History\">\n      <h2>{`Previous Games${\n        playerName ? ` of ${playerName}` : \"\"\n      } on Difficulty ${difficultyLevel}:`}</h2>\n      <ol>\n        {history.map((entry, index) => {\n          if (entry.playerName === playerName && entry.difficultyLevel === difficultyLevel && difficultyLevel !== \"PROg(r)amer\")\n            return (\n              <li\n                key={index}\n              >{`${entry.playerName} required ${entry.numGuesses} guesses to guess the number ${entry.number}`}</li>\n            );\n          if (entry.playerName === playerName && entry.difficultyLevel === difficultyLevel && difficultyLevel === \"PROg(r)amer\")\n            return (\n              <li\n                key={index}\n              >{`${entry.playerName} wrote a function that required ${entry.numGuesses} guesses on average to guess a random number.`}</li>\n            );\n          return undefined\n        })}\n      </ol>\n    </section>\n  );\n};\n\nexport default History;\n","import React, { FC, ReactElement } from \"react\";\nimport \"./Description.css\";\n\nconst Description: FC = (): ReactElement => {\n  return (\n    <section className=\"Description\">\n      <h1>Bulls and Cows</h1>\n      <p>\n        The computer will come up with a random 4 digit number. Your Goal is to\n        guess this number.\n      </p>\n      <p>\n        After each guess you will get a hint on how \"close\" your guess is to the\n        number. If there are any matching digits and they are in their right\n        positions, they are counted as \"bulls\". If in different positions, they\n        are counted as \"cows\".\n      </p>\n      <section>\n        Difficulty Levels:\n        <dl>\n          <dt>Easy</dt>\n          <dd>All Digits are unique.</dd>\n\n          <dt>Medium</dt>\n          <dd>Digits may not be unique.</dd>\n\n          <dt>PROg(r)amer</dt>\n          <dd>\n            Instead of guessing, you write a function which guesses for you. The\n            function is always called with the lastGuess object and a memory\n            argument. In the first invocation of the function lastGuess ={\" \"}\n            {\"{guess: '', bulls: 0, cows: 0}\"} and memory = null. The function\n            should return a results object like {\"{guess: string, memory: any}\"}{\" \"}\n            where guess should be a 4 digit String containing your guess and\n            memory can be anything you want to remember for further invocations.\n            On further invocations the function will be called with it's last\n            Guess, the number of bulls and cows this guess had and the last\n            memory returned by the function.\n          </dd>\n        </dl>\n      </section>\n    </section>\n  );\n};\n\nexport default Description;\n","import React, { FC, ReactElement } from \"react\";\nimport { DifficultyLevel, OptionsState } from \"../../common/Types\";\nimport \"./Options.css\";\n\nconst Options: FC<{\n  disabled: boolean;\n  setOptions: (arg: Partial<OptionsState>) => void;\n  optionState: OptionsState;\n  previousPlayers: string[];\n}> = ({\n  disabled,\n  optionState: { playerName, difficultyLevel },\n  setOptions,\n  previousPlayers\n}): ReactElement => {\n  const difficultyListId = \"difficultyLevels\";\n  return (\n    <section className=\"Options\">\n      <label htmlFor=\"playerName\">\n        Player Name:\n        <input\n          list=\"playerNames\"\n          type=\"text\"\n          name=\"playerName\"\n          value={playerName}\n          onChange={(event) => setOptions({ playerName: event.target.value })}\n          disabled={disabled}\n        />\n        <datalist id=\"playerNames\">\n          {previousPlayers.map((playerName, index)=><option key={index} value={playerName}></option>)}\n        </datalist>\n      </label>\n      <label htmlFor=\"difficulty\">\n        Difficulty:\n        <select\n          name=\"difficulty\"\n          value={difficultyLevel}\n          id={difficultyListId}\n          onChange={(event) =>\n            setOptions({\n              difficultyLevel: event.target.value as DifficultyLevel,\n            })\n          }\n          disabled={disabled}\n        >\n          <option value=\"Easy\">Easy</option>\n          <option value=\"Medium\">Medium</option>\n          <option value=\"PROg(r)amer\">PROg(r)amer</option>\n        </select>\n      </label>\n    </section>\n  );\n};\n\nexport default Options;\n","import React, { FC, ReactElement, useEffect, useState } from \"react\";\nimport \"./Loader.css\";\n\nconst Loader: FC = (): ReactElement => {\n  const [dots, setDots] = useState(\"\")\n  useEffect(()=>{\n    const interval = setInterval(()=>{\n      const newDots = Array((dots.length + 1)%4).fill(\".\").join(\"\")\n      setDots(newDots)\n    },500)\n    return () => {\n      clearInterval(interval)\n    }\n  })\n  return (\n    <div className=\"Loader\">\n      {`Evaluating your Function${dots}`}\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useReducer, FC, ReactElement, useLayoutEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  DispatchAction,\n  AppState,\n  DifficultyLevel,\n  GuessingFunction,\n  GuessingFunctionRunnerResponse,\n  AppHistory,\n} from \"../../common/Types\";\nimport History from \"../History/History\";\nimport Description from \"../Description/Description\";\nimport Options from \"../Options/Options\";\nimport GuessInterface from \"../GuessInterface/GuessInterface\";\nimport GuessFunctionRunner from \"../../common/guessingFunctionRunner\";\nimport Loader from \"../Loader/Loader\";\n\nconst initialAppState: AppState = {\n  options: { playerName: \"Stranger\", difficultyLevel: \"Easy\" },\n  round: {\n    evaluatingFunction: false,\n    number: generateNumber(\"Easy\"),\n    correctGuess: false,\n    guess: \"\",\n    numGuesses: 0,\n    message: \"Take a guess!\",\n    bulls: 0,\n    cows: 0,\n    guessFunctionBody: \"\",\n  },\n  history: [],\n};\n\nconst App: FC = (): ReactElement => {\n  const [state, dispatch] = useReducer(reducer, initialAppState);\n\n  //Load the old History from Local Storage on first Render\n  useLayoutEffect(() => {\n    const history = getHistoryFromLocalStorage();\n    dispatch({ type: \"history\", history });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {state.round.evaluatingFunction ? <Loader /> : null}\n      <Description />\n      <Options\n        disabled={state.round.numGuesses > 0 || state.round.evaluatingFunction}\n        previousPlayers={getPreviousPlayers(state.history)}\n        optionState={state.options}\n        setOptions={(options) => {\n          dispatch({ type: \"options\", options });\n        }}\n      />\n      <GuessInterface\n        difficultyLevel={state.options.difficultyLevel}\n        guessState={state.round.guess}\n        setGuess={(guess) => dispatch({ type: \"round\", round: { guess } })}\n        disabled={state.round.correctGuess || state.round.evaluatingFunction}\n        onSubmitGuessFunction={() =>\n          handleGuessFunctionSubmit(\n            dispatch,\n            state.round.number,\n            state.round.guessFunctionBody\n          )\n        }\n        guessFunctionBody={state.round.guessFunctionBody}\n        setGuessFunctionBody={(guessFunctionBody) =>\n          dispatch({ type: \"round\", round: { guessFunctionBody } })\n        }\n        onTakeGuess={() => {\n          const guessResults = getGuessResult(state);\n          console.log({ ...state, ...guessResults });\n          const newMessage = generateMessage({\n            ...state,\n            round: { ...state.round, ...guessResults },\n          });\n          console.log(newMessage);\n\n          dispatch({\n            type: \"round\",\n            round: {\n              ...guessResults,\n              message: newMessage,\n            },\n          });\n        }}\n      />\n      <p>{state.round.message}</p>\n      <input\n        type=\"button\"\n        value=\"New Round\"\n        disabled={!state.round.correctGuess || state.round.evaluatingFunction}\n        onClick={() => {\n          dispatch({ type: \"resetGuessFunction\" });\n          dispatch({\n            type: \"round\",\n            round: {\n              ...initialAppState.round,\n              number: generateNumber(state.options.difficultyLevel),\n            },\n          });\n          const newHistory = [\n            ...state.history,\n            {\n              playerName: state.options.playerName,\n              numGuesses: state.round.numGuesses,\n              number: state.round.number,\n              difficultyLevel: state.options.difficultyLevel,\n            },\n          ];\n          dispatch({\n            type: \"history\",\n            history: newHistory,\n          });\n          localStorage.setItem(\"history\", JSON.stringify(newHistory));\n        }}\n      />\n      <History\n        history={state.history}\n        playerName={state.options.playerName}\n        difficultyLevel={state.options.difficultyLevel}\n      />\n    </div>\n  );\n};\n\nfunction getHistoryFromLocalStorage(): AppHistory {\n  const historyString = localStorage.getItem(\"history\");\n  return historyString ? JSON.parse(historyString) : [];\n}\n\nfunction handleGuessFunctionSubmit(\n  dispatch: React.Dispatch<DispatchAction>,\n  number: string,\n  guessFunctionBody: string\n) {\n  dispatch({ type: \"round\", round: { evaluatingFunction: true } });\n  const code = GuessFunctionRunner.toString();\n  const blob = new Blob([\"(\" + code + \")()\"]);\n  const worker = new Worker(URL.createObjectURL(blob));\n  let receivedMsg = false;\n  worker.onmessage = (msg) => {\n    dispatch({ type: \"round\", round: { evaluatingFunction: false } });\n    receivedMsg = true;\n    const data = msg.data as GuessingFunctionRunnerResponse;\n    switch (data.type) {\n      case \"result\":\n        if (data.correctGuess) {\n          dispatch({\n            type: \"round\",\n            round: {\n              numGuesses: data.numGuesses,\n              message: `Your Function needed ${data.numGuesses} guesses on average to find the number`,\n              correctGuess: true,\n              guess: number,\n            },\n          });\n        } else {\n          dispatch({\n            type: \"round\",\n            round: {\n              message: `Your Function has not found the correct Number after ${data.numGuesses} guesses. Try changing it.`,\n            },\n          });\n        }\n        break;\n      case \"error\":\n        dispatch({\n          type: \"round\",\n          round: {\n            message: data.error,\n          },\n        });\n    }\n    worker.terminate();\n  };\n  worker.postMessage({\n    type: \"runFunction\",\n    payload: { functionBody: guessFunctionBody, number: number },\n  });\n  setTimeout(() => {\n    if (!receivedMsg) {\n      dispatch({ type: \"round\", round: { evaluatingFunction: false } });\n      worker.terminate();\n      dispatch({\n        type: \"round\",\n        round: {\n          message: `It seems like your function is too slow or contains an infinite loop, try changing it. It took more than 5s to complete.`,\n        },\n      });\n    }\n  }, 5000);\n}\n\nfunction getPreviousPlayers(history: AppHistory) {\n  const previousPlayers: string[] = [];\n  for (const entry of history) {\n    if (!previousPlayers.includes(entry.playerName))\n      previousPlayers.push(entry.playerName);\n  }\n  return previousPlayers;\n}\n\nfunction reducer(oldState: AppState, action: DispatchAction): AppState {\n  let newState = { ...oldState };\n  switch (action.type) {\n    case \"options\":\n      newState.options = { ...oldState.options, ...action.options };\n      if (\n        oldState.options.difficultyLevel !== newState.options.difficultyLevel\n      ) {\n        newState.round.number = generateNumber(\n          newState.options.difficultyLevel\n        );\n      }\n      return newState;\n\n    case \"round\":\n      return {\n        ...oldState,\n        round: {\n          ...oldState.round,\n          ...action.round,\n        },\n      };\n\n    case \"history\":\n      return { ...oldState, history: action.history };\n\n    default:\n      return oldState;\n  }\n}\n\nfunction runGuessingFunction(\n  guessingFunction: GuessingFunction,\n  number: string\n) {\n  try {\n    const maxIterations = 10000;\n    let i = 1;\n    const lastGuess = { guess: \"\", bulls: 0, cows: 0 };\n    let oldMemory = null;\n    while (i <= maxIterations) {\n      const { guess, memory } = guessingFunction(lastGuess, oldMemory);\n      oldMemory = memory;\n      lastGuess.guess = guess;\n      lastGuess.bulls = getNumberOfBulls(number, guess);\n      lastGuess.cows = getNumberOfCows(number, guess);\n      if (lastGuess.guess === number) break;\n      i++;\n    }\n    return { foundNumber: lastGuess.guess === number, numGuesses: i };\n  } catch (error: any) {\n    return { foundNumber: false, numGuesses: Infinity, error };\n  }\n}\n\nfunction getNumberOfBulls(number: string, guess: string) {\n  let result = 0;\n  for (let i = 0; i < guess.length; i++) {\n    const digit = guess[i];\n    if (digit === number[i]) result++;\n  }\n  return result;\n}\n\nfunction getNumberOfCows(number: string, guess: string) {\n  let result = 0;\n  for (let i = 0; i < guess.length; i++) {\n    const digit = guess[i];\n    if (number.includes(digit) && digit !== number[i]) result++;\n  }\n  return result;\n}\n\nfunction provideHint(num: string) {\n  const index = Math.floor(Math.random() * num.length);\n  return `If i were you, i would put a ${num[index]} on the ${humanizeNumber(\n    index + 1\n  )} position.`;\n}\n\nfunction generateNumber(difficultyLevel: DifficultyLevel) {\n  const digits: number[] = [];\n  while (digits.length < 4) {\n    const digit = Math.floor(Math.random() * 10);\n    if (!digits.includes(digit) && difficultyLevel === \"Easy\") {\n      digits.push(digit);\n    }\n    if (difficultyLevel !== \"Easy\") digits.push(digit);\n  }\n  return digits.join(\"\");\n}\n\nfunction generateMessage({\n  round: { number, numGuesses, bulls, cows },\n  options: { playerName },\n}: AppState) {\n  const randomMessages = [\n    \"Woops, no cows and no bulls? Better luck next time!\",\n    \"At least you tried?!\",\n    \"Are you sure you understood the Game?\",\n    `${provideHint(number)}`,\n  ];\n  if (numGuesses > 0) {\n    if (bulls === 4) {\n      return `Congratulation ${playerName}! You found the correct Number. Ready for a new Round?`;\n    }\n    if (bulls + cows > 0) {\n      return `Almost, you found ${bulls} bulls and ${cows} cows. This is your ${humanizeNumber(\n        numGuesses\n      )} guess.`;\n    }\n    return (\n      randomMessages[Math.floor(Math.random() * randomMessages.length)] +\n      ` This is your ${humanizeNumber(numGuesses)} guess.`\n    );\n  } else return \"Take a guess!\";\n}\n\nfunction getGuessResult({ round: { number, guess, numGuesses } }: AppState) {\n  const bulls = getNumberOfBulls(number, guess);\n  const cows = getNumberOfCows(number, guess);\n  return {\n    numGuesses: ++numGuesses,\n    correctGuess: number === guess,\n    bulls,\n    cows,\n  };\n}\n\nfunction humanizeNumber(num: number) {\n  switch (num) {\n    case 1:\n      return 1 + \"st\";\n    case 2:\n      return 2 + \"nd\";\n    case 3:\n      return 3 + \"rd\";\n    default:\n      return num + \"th\";\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}